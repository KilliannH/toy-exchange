datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  city      String?
  lat       Float?
  lng       Float?
  radiusKm  Int?     @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations existantes
  toys     Toy[]
  accounts Account[]
  sessions Session[]

  // Nouvelles relations
  sentExchanges    Exchange[] @relation("ExchangeRequester")
  sentMessages     Message[]  @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  givenReviews     Review[]   @relation("ReviewGiver")
  receivedReviews  Review[]   @relation("ReviewReceiver")
  favorites        Favorite[]
}

model Toy {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  condition   Condition
  category    Category
  ageMin      Int
  ageMax      Int
  mode        Mode
  lat         Float?
  lng         Float?
  status      Status    @default(AVAILABLE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations existantes
  images ToyImage[]

  // Nouvelles relations
  exchanges         Exchange[]
  proposedExchanges Exchange[] @relation("ProposedToy") // üëà oppos√© de Exchange.proposedToy
  messages          Message[]
  favorites         Favorite[]
}

// Nouveau mod√®le pour les √©changes
model Exchange {
  id            String         @id @default(cuid())
  requesterId   String
  toyId         String
  status        ExchangeStatus @default(PENDING)
  message       String?
  proposedToyId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  completedAt   DateTime?

  requester   User    @relation("ExchangeRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  toy         Toy     @relation(fields: [toyId], references: [id], onDelete: Cascade)
  proposedToy Toy?    @relation("ProposedToy", fields: [proposedToyId], references: [id])
  review      Review? // üëà oppos√© de Review.exchange

  @@unique([requesterId, toyId])
}

// Nouveau mod√®le pour la messagerie
model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  toyId      String?
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  toy      Toy? @relation(fields: [toyId], references: [id], onDelete: SetNull)
}

// Nouveau mod√®le pour les √©valuations
model Review {
  id         String   @id @default(cuid())
  reviewerId String
  revieweeId String
  exchangeId String   @unique
  rating     Int      @db.SmallInt // 1-5
  comment    String?
  createdAt  DateTime @default(now())

  reviewer User     @relation("ReviewGiver", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee User     @relation("ReviewReceiver", fields: [revieweeId], references: [id], onDelete: Cascade)
  exchange Exchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
}

// Nouveau mod√®le pour les favoris
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  toyId     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  toy  Toy  @relation(fields: [toyId], references: [id], onDelete: Cascade)

  @@unique([userId, toyId])
}

// Enums existants
enum Condition {
  NEW
  VERY_GOOD
  GOOD
  USED
}

enum Category {
  CONSTRUCTION
  DOLLS
  VEHICLES
  BOARD_GAMES
  BOOKS
  OTHER
}

enum Mode {
  DON
  EXCHANGE
  POINTS
}

enum Status {
  AVAILABLE
  RESERVED
  EXCHANGED
}

// Nouveaux enums
enum ExchangeStatus {
  PENDING // Demande d'√©change en attente
  ACCEPTED // √âchange accept√©
  REJECTED // √âchange refus√©
  COMPLETED // √âchange termin√©
  CANCELLED // √âchange annul√©
}

model ToyImage {
  id        String  @id @default(cuid())
  toyId     String
  toy       Toy     @relation(fields: [toyId], references: [id], onDelete: Cascade)
  url       String
  fileName  String? // Pour g√©rer les fichiers upload√©s
  signedUrl String? // URL temporaire sign√©e
  order     Int     @default(0)
  offsetY  Int?
}

// Mod√®les NextAuth existants
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
