datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  city      String?
  lat       Float?
  lng       Float?
  radiusKm  Int?      @default(10)
  createdAt DateTime  @default(now())
  toys      Toy[]
  accounts  Account[]
  sessions  Session[]
}

model Toy {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  title       String
  description String
  condition   Condition
  category    Category
  ageMin      Int
  ageMax      Int
  mode        Mode
  lat         Float?
  lng         Float?
  status      Status     @default(AVAILABLE)
  createdAt   DateTime   @default(now())
  images      ToyImage[]
}

enum Condition {
  NEW
  VERY_GOOD
  GOOD
  USED
}

enum Category {
  CONSTRUCTION
  DOLLS
  VEHICLES
  BOARD_GAMES
  BOOKS
  OTHER
}

enum Mode {
  DON
  EXCHANGE
  POINTS
}

enum Status {
  AVAILABLE
  RESERVED
  EXCHANGED
}

model ToyImage {
  id    String @id @default(cuid())
  toyId String
  toy   Toy    @relation(fields: [toyId], references: [id])
  url   String
  order Int    @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
